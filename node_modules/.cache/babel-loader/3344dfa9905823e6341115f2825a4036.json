{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\37258\\\\part1\\\\src\\\\components\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst App = () => {\n  const [country, setCountry] = useState('');\n  const [countriesInfo, setCountriesInfo] = useState([]);\n  const [dataResponse, setDataResponse] = useState([]);\n  const [dataDisplayed, setDataDisplayed] = useState('');\n  const [weatherDisplayed, setWeatherDisplayed] = useState([]);\n  const [weather, setWeather] = useState({});\n  const [location, setLocation] = useState('');\n\n  const hook = () => {\n    axios.get('https://restcountries.eu/rest/v2/all').then(response => {\n      setCountriesInfo(response.data);\n    });\n    handleCountryChange();\n  };\n\n  const getWeather = () => {\n    axios.get('http://api.weatherstack.com/current', {\n      params: {\n        access_key: process.env.REACT_APP_API_KEY,\n        query: location\n      }\n    }).then(response => {\n      if (location) {\n        const cityWeather = {\n          temperature: response.data.current.temperature,\n          icon: response.data.current.weather_icons[0],\n          speed: response.data.current.wind_speed,\n          direction: response.data.current.wind_dir\n        };\n        setWeather(cityWeather);\n      } else {\n        return;\n      }\n    });\n  };\n\n  console.log(weather.temperature);\n\n  const handleCountryChange = () => {\n    const found = countriesInfo.findIndex(countryInfo => countryInfo.name.includes(country));\n\n    if (found === -1) {\n      return;\n    } else if (found > -1) {\n      const updatedCountry = countriesInfo.filter(countryInfo => countryInfo.name.includes(country));\n      setDataResponse(updatedCountry);\n    }\n\n    if (dataResponse.length > 10) {\n      setDataDisplayed('Too many matches, specify another filter');\n    } else if (dataResponse.length < 10 && dataResponse.length > 1) {\n      const returnedData = dataResponse.map(data => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 16\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          key: data.numericCode,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }\n        }, data.name), /*#__PURE__*/React.createElement(\"button\", {\n          name: data.name,\n          onClick: e => {\n            setCountry(e.target.name);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }\n        }, \"show\"));\n      });\n      setDataDisplayed(returnedData); // console.log(dataResponse)\n    } else if (dataResponse.length === 1) {\n      setLocation(dataResponse[0].capital);\n      console.log(dataResponse[0].capital);\n      console.log(location);\n      console.log(dataResponse);\n      getWeather();\n      console.log(Object.keys(weather).length);\n      const returnedData = dataResponse.map(data => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: data.numericCode,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 16\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }\n        }, data.name), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }\n        }, \"capital \", data.capital), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }\n        }, \"population \", data.population), /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }\n        }, \"Spoken languages\"), /*#__PURE__*/React.createElement(\"ul\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }\n        }, data.languages.map(language => {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            key: data.languages.nativeName,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 28\n            }\n          }, language.name);\n        })), /*#__PURE__*/React.createElement(\"img\", {\n          src: data.flag,\n          width: \"100\",\n          height: \"100\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }\n        }));\n      });\n      setDataDisplayed(returnedData);\n\n      const returnedWeather = () => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }\n        }, \"Weather in \", location), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"strong\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 20\n          }\n        }, \"temperature: \", weather.temperature, \" celcius\")), /*#__PURE__*/React.createElement(\"img\", {\n          src: weather.icon,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"strong\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 20\n          }\n        }, \"wind:\"), \" \", weather.speed, \" mph direction \", weather.direction));\n      };\n\n      setWeatherDisplayed(returnedWeather);\n    }\n  };\n\n  useEffect(hook, [country, dataResponse.length, Object.keys(weather).length]);\n  useEffect(getWeather, [dataResponse.length, location]); // useEffect(weather, [dataResponse.length, location.length])\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, \"find countries\", /*#__PURE__*/React.createElement(\"input\", {\n    onChange: e => {\n      setCountry(e.target.value);\n    },\n    value: country,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  })), dataDisplayed, weatherDisplayed);\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/37258/part1/src/components/App.js"],"names":["React","useState","useEffect","axios","App","country","setCountry","countriesInfo","setCountriesInfo","dataResponse","setDataResponse","dataDisplayed","setDataDisplayed","weatherDisplayed","setWeatherDisplayed","weather","setWeather","location","setLocation","hook","get","then","response","data","handleCountryChange","getWeather","params","access_key","process","env","REACT_APP_API_KEY","query","cityWeather","temperature","current","icon","weather_icons","speed","wind_speed","direction","wind_dir","console","log","found","findIndex","countryInfo","name","includes","updatedCountry","filter","length","returnedData","map","numericCode","e","target","capital","Object","keys","population","languages","language","nativeName","flag","returnedWeather","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nconst App = () => {\r\n  const [ country, setCountry ] = useState('');\r\n  const [ countriesInfo, setCountriesInfo ] = useState([]);\r\n  const [ dataResponse, setDataResponse ] = useState([]);\r\n  const [ dataDisplayed, setDataDisplayed ] = useState('')\r\n  const [ weatherDisplayed, setWeatherDisplayed ] = useState([])\r\n  const [ weather, setWeather ] = useState({})\r\n  const [ location, setLocation ] = useState('')\r\n\r\n  const hook = () => {\r\n    axios.get('https://restcountries.eu/rest/v2/all').then(response => {\r\n      setCountriesInfo(response.data)\r\n    })\r\n    handleCountryChange()\r\n  }\r\n\r\n  const getWeather = () => {\r\n    axios.get('http://api.weatherstack.com/current', {\r\n      params: {\r\n        access_key: process.env.REACT_APP_API_KEY,\r\n        query: location\r\n      }\r\n    }).then(response => {\r\n      if (location) {\r\n        const cityWeather = {\r\n          temperature: response.data.current.temperature,\r\n          icon: response.data.current.weather_icons[0],\r\n          speed: response.data.current.wind_speed,\r\n          direction: response.data.current.wind_dir\r\n        }\r\n        setWeather(cityWeather)\r\n      } else {\r\n        return;\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n  console.log(weather.temperature)\r\n\r\n\r\n  const handleCountryChange = () => {\r\n\r\n    const found = countriesInfo.findIndex(countryInfo => countryInfo.name.includes(country))\r\n\r\n    if( found === -1 ) {\r\n      return;\r\n    }\r\n    else if ( found > -1 ) {\r\n      const updatedCountry = countriesInfo.filter(countryInfo => countryInfo.name.includes(country))\r\n      setDataResponse(updatedCountry)\r\n\r\n    }\r\n \r\n\r\n    if ( dataResponse.length >  10 ) {\r\n\r\n      setDataDisplayed('Too many matches, specify another filter')\r\n    }\r\n    else if ( dataResponse.length < 10 && dataResponse.length > 1 ) {\r\n      const returnedData = dataResponse.map((data) => {\r\n         \r\n        return <div>\r\n                <span key={data.numericCode}>{data.name}</span>\r\n                <button name={data.name}onClick={(e) => {setCountry(e.target.name)}}>show</button>\r\n               </div>\r\n        \r\n      })\r\n      setDataDisplayed(returnedData)\r\n      // console.log(dataResponse)\r\n    }\r\n    else if ( dataResponse.length === 1 ) {\r\n      setLocation(dataResponse[0].capital)\r\n      console.log(dataResponse[0].capital)\r\n      console.log(location)\r\n      console.log(dataResponse)\r\n      getWeather()\r\n      console.log(Object.keys(weather).length)\r\n      const returnedData = dataResponse.map((data) => {\r\n \r\n        return <div key={data.numericCode}>\r\n                <h1>{data.name}</h1>\r\n                <p>capital {data.capital}</p>\r\n                <p>population {data.population}</p>\r\n                <h3>Spoken languages</h3>\r\n                <ul>\r\n                  {data.languages.map((language) => {\r\n                    return <li key={data.languages.nativeName}>{language.name}</li>\r\n                  })}\r\n                </ul>\r\n                <img src={data.flag} width=\"100\" height=\"100\"/>\r\n                \r\n               </div>\r\n        \r\n      })\r\n      setDataDisplayed(returnedData)\r\n\r\n      const returnedWeather = () => {\r\n        \r\n        return (\r\n        <div>\r\n                <h3>Weather in {location}</h3>\r\n                <p><strong>temperature: {weather.temperature} celcius</strong></p>\r\n                <img src={weather.icon}/>\r\n                <p><strong>wind:</strong> {weather.speed} mph direction {weather.direction}</p>\r\n               </div>\r\n               )\r\n      }\r\n      setWeatherDisplayed(returnedWeather)\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  useEffect(hook, [ country, dataResponse.length, Object.keys(weather).length ])\r\n  useEffect(getWeather, [dataResponse.length, location])\r\n  // useEffect(weather, [dataResponse.length, location.length])\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <form>\r\n        find countries\r\n        <input\r\n        onChange={(e) => {setCountry(e.target.value)}}\r\n        value={country}>\r\n        </input>\r\n      </form>\r\n      {dataDisplayed}\r\n      {weatherDisplayed}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App"]},"metadata":{},"sourceType":"module"}